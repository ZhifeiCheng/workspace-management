swagger: '2.0'

info:
  description: This is a sample Room Scheduler.
  version: 1.0.0
  title: Simple Room Scheduler
  # put the contact info for your development or API team
  contact:
    email: zc5dp@uw.edu

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

tags:
  - name: room
    description: Everything about rooms

  - name: meeting
    description: Meeting related items.

  - name: user
    description: users



paths:
  /rooms:
    get:
      tags:
        - room
      summary: List rooms
      operationId: ListRooms
      description: List all rooms
      produces:
        - application/json
      parameters:
        - in: query
          name: sortBy
          description: pass an optional search string for looking up a room
          type: string
          default: ID
          enum:
            - CAPACITY
            - DISTANCE
            - ID
        - in: query
          name: limit
          description: max room items per page
          type: integer
          format: int32
          required: false
        - in: query
          name: page
          description: page number
          type: integer
          format: int32
          required: false
      responses:
        '200':
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/Room'
        '400':
          description: bad input parameter
    post:
      tags:
        - room
      summary: create a meeting room
      operationId: CreateRoom
      description: create a meeting room
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: createRoomItem
          description: pass raw data roomItem in json format
          schema:
            $ref: '#/definitions/CreateRoomItem'
      responses:
        '201':
          description: rooms created
        '400':
          description: invalid input, object invalid
        '409':
          description: an existing item already exists

  /rooms/{roomId}:
    delete:
      tags:
        - room
      summary: delete a room by given id
      operationId: DeleteRoom
      description: Delete a room by given id
      parameters:
        - in: path
          name: roomId
          description: Room id ro delete
          required: true
          type: integer
          format: int64
      responses:
        '204':
          description: room deleted.
        '404':
          description: room not found
    put:
      tags:
        - room
      summary: update a meeting room
      operationId: UpdateRoom
      description: update a meeting room
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: roomId
          required: true
          description: target room id
          type: integer
          format: int64
        - in: body
          name: updateRoomRequest
          description: pass raw data roomItem in json format
          schema:
            $ref: '#/definitions/UpdateRoomItem'
      responses:
        '200':
          description: rooms updated
          schema:
            $ref: "#/definitions/Room"
        '400':
          description: invalid input, object invalid
        '404':
          description: room not found.
    get:
      tags:
        - room
      summary: Search a room by given id
      operationId: GetRoom
      description: Search a room by given id and return roomItem if the room is available
      produces:
        - application/json
      parameters:
        - in: path
          name: roomId
          description: pass a required search string for looking up a room
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: search results matching criteria
          schema:
            $ref: '#/definitions/Room'
        '404':
          description: room not found.

  /users:
    post:
      tags:
        - user
      summary: Registration user into the system
      operationId: CreateUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: createUserItem
          in: body
          schema:
            $ref: '#/definitions/CreateUserItem'
      responses:
        '201':
          description: user created.
          schema:
            $ref: '#/definitions/User'
        '409':
          description: user name is used.
        '400':
          description: invalid create user request.
    get:
      tags:
        - user
      summary: List users
      operationId: ListUsers
      produces:
        - application/json
      parameters:
        - in: query
          name: username
          type: string
          required: false
        - in: query
          name: limit
          description: max room items per page
          type: integer
          format: int32
          required: false
        - in: query
          name: page
          description: page number
          type: integer
          format: int32
          required: false
      responses:
        '200':
          description: Users match requriements
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '400':
          description: Bad request.

  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      operationId: Login
      parameters:
        - in: body
          name: logInfo
          description: the user to login
          schema:
            type: object
            required:
              - username
              - pasword
            properties:
              userName:
                type: string
              password:
                type: string
                format: password
      responses:
        '200':
          description: successful login
        '401':
          description: Invalid username/password supplied

  /users/{userId}:
    get:
      tags:
        - user
      summary: Get user by id
      operationId: GetUserById
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: The id that needs to be fetched.
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '404':
          description: user not found.
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: UpdateUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: name that need to be updated
          required: true
          type: integer
          format: int64
        - in: body
          name: updateUserItem
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/UpdateUserItem'
      responses:
        '400':
          description: Bad request.
        '404':
          description: User not found
        '403':
          description:  no permission
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: DeleteUser
      parameters:
        - name: userId
          in: path
          description: The name that needs to be deleted
          required: true
          type: integer
          format: int64
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found

  /meetings:
    post:
      tags:
        - meeting
      summary: create a meeting
      operationId: CreateMeeting
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: createMeetingItem
          description: infomation to create a meeting
          schema:
            $ref: '#/definitions/CreateMeetingItem'
      responses:
        '201':
          description: meeting created
          schema:
            $ref: '#/definitions/Meeting'
        '400':
          description: bad request
    get:
      tags:
        - meeting
      summary: list all meetings.
      operationId: ListMeetings
      produces:
        - application/json
      parameters:
        - in: query
          name: sortby
          type: string
          default: ID
          enum:
            - ID
            - ENDTIME
            - CAPACITY
        - in: query
          name: userId
          type: integer
          format: int64
        - in: query
          name: roomId
          type: integer
          format: int64
      responses:
        '200':
          description: List of meetings
          schema:
            type: array
            items:
              $ref: '#/definitions/Meeting'

  /meetings/{meetingId}:
    get:
      description: Get the meeting with id
      operationId: GetMeeting
      summary: Get meeting with id.
      parameters:
        - in: path
          required: true
          name: meetingId
          type: integer
          format: int64
      responses:
        '200':
          description: find meeting.
          schema:
            $ref: '#/definitions/Meeting'
        '404':
          description: meeting not found.
    put:
      description: Update an exsting meeting
      operationId: UpdateMeeting
      summary: Update the meeting
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: meetingId
          required: true
          type: integer
          format: int64
        - in: body
          name: updateMeetingItem
          required: true
          schema:
            $ref: '#/definitions/UpdateMeetingItem'
      responses:
        '201':
          description: Meeting is updated succssfully.
          schema:
            $ref: "#/definitions/Meeting"
        '400':
          description: Bad request.
        '404':
          description: Meeting not found
    delete:
      description: Delete a meeting
      operationId: DeleteMeeting
      parameters:
        - in: path
          required: true
          name: meetingId
          type: integer
          format: int64
      responses:
        '204':
          description: Meeting is deleted.
        '404':
          description: Meeting not found.

definitions:
  # Create resources
  CreateRoomItem:
    type: object
    required:
      - id
      - capacity
      - b_x_corrdinate
      - b_y_corrdinate
      - t_x_corrdinate
      - t_y_corrdinate
      - floor
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        example: room1
      capacity:
        type: integer
        format: int32
        example: 5
      b_x_corrdinate:
        type: number
        format: double
        example: 0.00
      b_y_corrdinate:
        type: number
        format: double
        example: 0.00
      t_x_corrdinate:
        type: number
        format: double
        example: 100.00
      t_y_corrdinate:
        type: number
        format: double
        example: 200.00
      floor:
        type: integer
        format: int32
        example: 1
      type:
        type: string
        default: CONFERENCE
        enum:
          - CONFERENCE
          - GYM
          - CUBICLE
          - PANTRY
          - RESTROOM
  CreateUserItem:
    type: object
    required:
      - username
      - email
      - password
    properties:
      username:
        type: string
        example: "Susan"
      email:
        type: string
        format: email
        example: "abc@uw.edu"
      password:
        type: string
        format: password
      group:
        type: string
        default: USER
        enum:
          - USER
          - ADMIN
      previlege:
        type: integer
        format: int64
      floor:
        type: integer
        format: int32
        default: 1
      location_x:
        type: number
        format: double
        default: 0.0
      location_y:
        type: number
        format: double
        default: 0.0
  CreateMeetingItem:
    type: object
    required:
      - host
      - startTime
      - endTime
      - room
    properties:
      host:
        $ref: '#/definitions/User'
      guests:
        type: array
        items:
          $ref: '#/definitions/User'
      startTime:
        type: string
        format: date-time
        example: '1996-12-19T16:39:57-08:00'
      endTime:
        type: string
        format: date-time
        example: '1996-12-19T16:39:57-08:00'
      room:
        $ref: '#/definitions/Room'

  # Update resources
  UpdateRoomItem:
    type: object
    properties:
      name:
        type: string
        example: room1
      capacity:
        type: integer
        format: int32
        example: 5
      type:
        type: string
        default: CONFERENCE
        enum:
          - CONFERENCE
          - GYM
          - CUBICLE
          - PANTRY
          - RESTROOM
  UpdateUserItem:
    type: object
    properties:
      password:
        type: string
        format: password
      group:
        type: string
        default: USER
        enum:
          - USER
          - ADMIN
          - GROUPOWNER
      previlege:
        type: integer
        format: int64
      floor:
        type: integer
        format: int32
      location_x:
        type: number
        format: double
      location_y:
        type: number
        format: double
  UpdateMeetingItem:
    properties:
      host:
        $ref: '#/definitions/User'
      guests:
        type: array
        items:
          $ref: '#/definitions/User'
      startTime:
        type: string
        format: date-time
        example: '1996-12-19T16:39:57-08:00'
      endTime:
        type: string
        format: date-time
        example: '1996-12-19T16:39:57-08:00'
      room:
        $ref: '#/definitions/Room'

  # Resources
  Room:
    type: object
    required:
      - id
      - name
      - capacity
      - b_x_corrdinate
      - b_y_corrdinate
      - t_x_corrdinate
      - t_y_corrdinate
      - floor
      - type
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        example: room1
      capacity:
        type: integer
        example: 5
      b_x_corrdinate:
        type: string
        example: 0.00
      b_y_corrdinate:
        type: string
        example: 0.00
      t_x_corrdinate:
        type: string
        example: 100.00
      t_y_corrdinate:
        type: string
        example: 200.00
      floor:
        type: integer
        format: int32
        example: 1
      type:
        type: string
        default: CONFERENCE
        enum:
          - CONFERENCE
          - GYM
          - CUBICLE
          - PANTRY
          - RESTROOM
      meetings:
        type: array
        items:
          $ref: '#/definitions/Meeting'
  Meeting:
    required:
      - meetingId
      - host
      - guests
      - start_time
      - end_time
    properties:
      meetingId:
        type: integer
        format: int64
      meeting_name:
        type: string
        example: coordination
      host:
        $ref: '#/definitions/User'
      guests:
        type: array
        items:
          $ref: '#/definitions/User'
      startTime:
        type: string
        format: date-time
        example: '1996-12-19T16:39:57-08:00'
      endTime:
        type: string
        format: date-time
        example: '1996-12-19T16:39:57-08:00'
      room:
        $ref: '#/definitions/Room'
  User:
    type: object
    required:
      - userId
      - username
      - email
      - location_x
      - location_y
    properties:
      userId:
        type: integer
        format: int64
      username:
        type: string
      email:
        type: string
        format: email
      floor:
        type: integer
        format: int32
      location_x:
        type: number
        format: double
      location_y:
        type: number
        format: double
      meetings:
        type: array
        items:
          $ref: '#/definitions/Meeting'

# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /TCSS-559/Room_Scheduler/1.0.0
schemes:
  - https